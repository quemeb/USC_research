gc()
shiny::runApp()
runApp()
shiny::runApp()
rs_ID_clean$refsnp_id
runApp()
runApp()
# Try to load AnnoQR
if (!requireNamespace("AnnoQR", quietly = TRUE)) {
# Check for devtools and install it if necessary
if (!requireNamespace("devtools", quietly = TRUE)) {
install.packages("devtools")
}
# Load devtools
library(devtools)
# Install AnnoQR from GitHub
install_github("USCbiostats/AnnoQR")
}
# Load AnnoQR
library(AnnoQR)
if (!requireNamespace("AnnoQR", quietly = TRUE)) {
# Check for devtools and install it if necessary
if (!requireNamespace("devtools", quietly = TRUE)) {
install.packages("devtools")
}
# Load devtools
library(devtools)
# Install AnnoQR from GitHub
install_github("USCbiostats/AnnoQR")
}
# Load AnnoQR
library(AnnoQR)
x <- regionQuery(contig = '20', start=26188698, end=26190631)
total_count <- x$hits$total$value
runApp()
setwd("C:/Users/bryan/Desktop/USC_research/Huaiyu/Snps-to-panther")
runApp()
variant = rsidQuery('rs193031179')
variant
View(variant)
# Desired fields
desired_fields <- c(
"ANNOVAR_ensembl_Gene_ID",
"ANNOVAR_ensembl_Closest_gene(intergenic_only)",
"SnpEff_ensembl_Gene_ID",
"VEP_ensembl_Gene_ID",
"ANNOVAR_refseq_Gene_ID",
"ANNOVAR_refseq_Closest_gene(intergenic_only)",
"SnpEff_refseq_Gene_ID",
"VEP_refseq_Gene_ID"
)
# Function to retrieve desired fields from result
extract_desired_fields <- function(result) {
sapply(desired_fields, function(field) {
if (!is.null(result[[field]])) {
return(result[[field]])
} else {
return(NA)
}
})
}
# Loop through the rsid list and perform queries
results <- lapply(rs_ID_clean$refsnp_id, function(rsid) {
query_result <- rsidQuery(rsid)
# Check if there are hits
if (query_result$hits$total > 0) {
# If there are multiple hits, you might want to decide how to handle.
# Here we're just taking the first hit
hit <- query_result$hits$hits[[1]]$`_source`
return(extract_desired_fields(hit))
} else {
return(rep(NA, length(desired_fields)))
}
})
query_result$hits$total
variant$hits$total
variant$hits$total > 0
# Desired fields
desired_fields <- c(
"ANNOVAR_ensembl_Gene_ID",
"ANNOVAR_ensembl_Closest_gene(intergenic_only)",
"SnpEff_ensembl_Gene_ID",
"VEP_ensembl_Gene_ID",
"ANNOVAR_refseq_Gene_ID",
"ANNOVAR_refseq_Closest_gene(intergenic_only)",
"SnpEff_refseq_Gene_ID",
"VEP_refseq_Gene_ID"
)
# Function to retrieve desired fields from result
extract_desired_fields <- function(result) {
sapply(desired_fields, function(field) {
if (!is.null(result[[field]])) {
return(result[[field]])
} else {
return(NA)
}
})
}
# Loop through the rsid list and perform queries
results <- lapply(rs_ID_clean$refsnp_id, function(rsid) {
query_result <- rsidQuery(rsid)
# Check if there are hits
if (query_result$hits$total$value > 0) {
# If there are multiple hits, you might want to decide how to handle.
# Here we're just taking the first hit
hit <- query_result$hits$hits[[1]]$`_source`
return(extract_desired_fields(hit))
} else {
return(rep(NA, length(desired_fields)))
}
})
# Convert results to a data.frame
df_results <- as.data.frame(do.call(rbind, results), stringsAsFactors = FALSE)
colnames(df_results) <- desired_fields
print(df_results)
View(df_results)
runApp()
runApp()
runApp()
View(results)
# Get ANNOQR annotations
df_geneIDs <- get_annoq_annotations(rs_ID_clean$refsnp_id)
source("C:/Users/bryan/Desktop/USC_research/Huaiyu/Snps-to-panther/extractEnsemblIDs.R")
df_ensembl <- extract_unique_ensembl_ids(df_geneIDs)
View(ensembl)
# Get ANNOQR annotations
df_geneIDs <- get_annoq_annotations(rs_ID_clean$refsnp_id)
source("C:/Users/bryan/Desktop/USC_research/Huaiyu/Snps-to-panther/extractEnsemblIDs.R")
df_ensembl <- extract_unique_ensembl_ids(df_geneIDs)
df_ensembl
df_ensembl <- extract_unique_ensembl_ids(df_geneIDs)
df_ensembl
# Get ANNOQR annotations
df_geneIDs <- get_annoq_annotations(rs_ID_clean$refsnp_id)
source("C:/Users/bryan/Desktop/USC_research/Huaiyu/Snps-to-panther/extractEnsemblIDs.R")
df_ensembl <- extract_unique_ensembl_ids(df_geneIDs)
# Get ANNOQR annotations
df_geneIDs <- get_annoq_annotations(rs_ID_clean$refsnp_id)
source("C:/Users/bryan/Desktop/USC_research/Huaiyu/Snps-to-panther/extractEnsemblIDs.R")
df_ensembl <- extract_unique_ensembl_ids(df_geneIDs)
df_ensembl
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df_results <- get_annoq_annotations(rs_ID_clean$refsnp_id)
View(df_results)
resultsData(df_results) # Assuming df_results is what the geneIDs_AnnoQ.R script outputs
# Fetch unique Ensembl IDs
source("C:/Users/bryan/Desktop/USC_research/Huaiyu/Snps-to-panther/extractEnsemblIDs.R")
unique_ensembl_matches <- extract_unique_ensembl_ids(df_results)
ensemblData(unique_ensembl_matches)
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df_results <<- get_annoq_annotations(rs_ID_clean$refsnp_id)
View(df_results)
# Fetch unique Ensembl IDs
source("C:/Users/bryan/Desktop/USC_research/Huaiyu/Snps-to-panther/extractEnsemblIDs.R")
unique_ensembl_matches <- extract_unique_ensembl_ids(df_results)
typeof(unique_ensembl_matches)
unique_ensembl_matches
rs_ID_clean$refsnp_id
typeof(rs_ID_clean$refsnp_id)
ensemblData()
ensemblData(unique_ensembl_matches)
ensemblData <- reactiveVal()
ensemblData(unique_ensembl_matches)
ensemblData
runApp()
runApp()
